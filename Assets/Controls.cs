//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""LoadScene"",
            ""id"": ""951f4520-1650-4c3c-9d9e-91149ca2c2b6"",
            ""actions"": [
                {
                    ""name"": ""Load"",
                    ""type"": ""Button"",
                    ""id"": ""1aa2347c-bf31-4a1c-882a-e174f99c2126"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""297cb9e5-b9f3-4cba-8643-5bbf0d3304d5"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Load"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UnloadScene"",
            ""id"": ""04c5b374-2780-4217-b7c2-e1c4872a765d"",
            ""actions"": [
                {
                    ""name"": ""Unload"",
                    ""type"": ""Button"",
                    ""id"": ""96cb72ad-7b2c-4f57-b310-d922e3721405"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7f854c5f-910a-401c-a2b6-c2704727a53a"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Unload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // LoadScene
        m_LoadScene = asset.FindActionMap("LoadScene", throwIfNotFound: true);
        m_LoadScene_Load = m_LoadScene.FindAction("Load", throwIfNotFound: true);
        // UnloadScene
        m_UnloadScene = asset.FindActionMap("UnloadScene", throwIfNotFound: true);
        m_UnloadScene_Unload = m_UnloadScene.FindAction("Unload", throwIfNotFound: true);
    }

    ~@Controls()
    {
        UnityEngine.Debug.Assert(!m_LoadScene.enabled, "This will cause a leak and performance issues, Controls.LoadScene.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UnloadScene.enabled, "This will cause a leak and performance issues, Controls.UnloadScene.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LoadScene
    private readonly InputActionMap m_LoadScene;
    private List<ILoadSceneActions> m_LoadSceneActionsCallbackInterfaces = new List<ILoadSceneActions>();
    private readonly InputAction m_LoadScene_Load;
    public struct LoadSceneActions
    {
        private @Controls m_Wrapper;
        public LoadSceneActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Load => m_Wrapper.m_LoadScene_Load;
        public InputActionMap Get() { return m_Wrapper.m_LoadScene; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LoadSceneActions set) { return set.Get(); }
        public void AddCallbacks(ILoadSceneActions instance)
        {
            if (instance == null || m_Wrapper.m_LoadSceneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LoadSceneActionsCallbackInterfaces.Add(instance);
            @Load.started += instance.OnLoad;
            @Load.performed += instance.OnLoad;
            @Load.canceled += instance.OnLoad;
        }

        private void UnregisterCallbacks(ILoadSceneActions instance)
        {
            @Load.started -= instance.OnLoad;
            @Load.performed -= instance.OnLoad;
            @Load.canceled -= instance.OnLoad;
        }

        public void RemoveCallbacks(ILoadSceneActions instance)
        {
            if (m_Wrapper.m_LoadSceneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILoadSceneActions instance)
        {
            foreach (var item in m_Wrapper.m_LoadSceneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LoadSceneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LoadSceneActions @LoadScene => new LoadSceneActions(this);

    // UnloadScene
    private readonly InputActionMap m_UnloadScene;
    private List<IUnloadSceneActions> m_UnloadSceneActionsCallbackInterfaces = new List<IUnloadSceneActions>();
    private readonly InputAction m_UnloadScene_Unload;
    public struct UnloadSceneActions
    {
        private @Controls m_Wrapper;
        public UnloadSceneActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Unload => m_Wrapper.m_UnloadScene_Unload;
        public InputActionMap Get() { return m_Wrapper.m_UnloadScene; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UnloadSceneActions set) { return set.Get(); }
        public void AddCallbacks(IUnloadSceneActions instance)
        {
            if (instance == null || m_Wrapper.m_UnloadSceneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UnloadSceneActionsCallbackInterfaces.Add(instance);
            @Unload.started += instance.OnUnload;
            @Unload.performed += instance.OnUnload;
            @Unload.canceled += instance.OnUnload;
        }

        private void UnregisterCallbacks(IUnloadSceneActions instance)
        {
            @Unload.started -= instance.OnUnload;
            @Unload.performed -= instance.OnUnload;
            @Unload.canceled -= instance.OnUnload;
        }

        public void RemoveCallbacks(IUnloadSceneActions instance)
        {
            if (m_Wrapper.m_UnloadSceneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUnloadSceneActions instance)
        {
            foreach (var item in m_Wrapper.m_UnloadSceneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UnloadSceneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UnloadSceneActions @UnloadScene => new UnloadSceneActions(this);
    public interface ILoadSceneActions
    {
        void OnLoad(InputAction.CallbackContext context);
    }
    public interface IUnloadSceneActions
    {
        void OnUnload(InputAction.CallbackContext context);
    }
}
